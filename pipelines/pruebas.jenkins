pipeline{
    agent { label 'Principal' }

    stages{

        stage('Pull GIT'){            
            steps {
                git branch: 'bugfix/test-jenkins' , credentialsId: 'GIT' , url: 'https://F1XNZSH@escmstash.1dc.com/scm/pp/posplatform-parent.git'
            }
        }

     
         stage('Build and deploy to nexus'){
            steps {
                //sh  'pwd'
                //sh  'whoami'
                //sh  'mvn clean deploy -Dmaven.test.skip=true'             
                sh  'mvn clean package -Dmaven.test.skip=true'    
                archiveArtifacts allowEmptyArchive: true, artifacts: 'posplatform-frontend/target/posplatform-frontend.war', followSymlinks: false, onlyIfSuccessful: true
                //sh  'mvn -f posplatform-frontend/pom.xml clean package -Dmaven.test.skip=true'
            }
        }

        stage('Scan to code'){
            parallel{
                stage('Scan Fortify'){
                    steps{
                        sh 'export BUILDID="UAID-03192" \n ## ejecuci√≥n del Fortify SCA \n #Clean \n $FORTIFY_HOME/bin/sourceanalyzer -b $BUILDID -clean \n #Build \n $FORTIFY_HOME/bin/sourceanalyzer -b $BUILDID $WORKSPACE/posplatform-frontend/src \n ## - Remote Translation and Remote Scan (Recommended Usage) \n $FORTIFY_HOME/bin/scancentral  -sscurl https://fortify.1dc.com/ssc -ssctoken "56a2a364-115c-4bcc-b033-29fca4e1d920" start -upload -application "UAID-03192" -application-version "1.0" -b $BUILDID -uptoken "56a2a364-115c-4bcc-b033-29fca4e1d920" -scan'
                    }
                }

                stage('Scan Sonar'){
                    steps{
                        sh  'mvn com.sonatype.clm:clm-maven-plugin:evaluate -Dclm.additionalScopes=test,provided,system -Dclm.applicationId=UAID-03192 -Dclm.serverUrl=https://lifecycle.1dc.com -Dclm.username=La7YBVv0 -Dclm.password=79jwNDMPslVffoYMf0aYDBzV8Ha9mIfG8chxGC9MtSSp'
                    }
                }
            }
        }

        // stage('Artifacts Delivery  '){
        //     parallel {
        //         stage('Artifacts Delivery in UAT ') {
        //           steps {
        //             sshPublisher(publishers: [sshPublisherDesc(configName: 'lkqvap1007', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'posplatform-frontend/target', sourceFiles: 'posplatform-frontend/target/posplatform-frontend.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        //           }
        //         }

        //         stage('CD JUMP') {
        //           steps {
        //             sshPublisher(publishers: [sshPublisherDesc(configName: 'rkpvtl1000', transfers: [sshTransfer(cleanRemote: true, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'posplatform-frontend/target', sourceFiles: 'posplatform-frontend/target/posplatform-frontend.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        //           }
        //         } 

        //          stage('CD DR') {
        //           agent { label 'Jump' }
        //           steps {
        //             sshPublisher(publishers: [sshPublisherDesc(configName: 'llbvap1025', transfers: [sshTransfer(cleanRemote: true, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'posplatform-frontend/target', sourceFiles: 'posplatform-frontend/target/posplatform-frontend.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        //             sshPublisher(publishers: [sshPublisherDesc(configName: 'llbvap1026', transfers: [sshTransfer(cleanRemote: true, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'posplatform-frontend/target', sourceFiles: 'posplatform-frontend/target/posplatform-frontend.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        //           }
        //         }   

        //         stage('CD PROD') {
        //           steps {
        //             sshPublisher(publishers: [sshPublisherDesc(configName: 'lkpvap1054', transfers: [sshTransfer(cleanRemote: true, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'posplatform-frontend/target', sourceFiles: 'posplatform-frontend/target/posplatform-frontend.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        //             sshPublisher(publishers: [sshPublisherDesc(configName: 'lkpvap1064', transfers: [sshTransfer(cleanRemote: true, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'posplatform-frontend/target', sourceFiles: 'posplatform-frontend/target/posplatform-frontend.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        //           }
        //         }            

        //     } 

        // }

        // stage ('Mantenimiento WILDFY '){
        //     steps {
        //         script {
        //             def remote = [:]
        //             remote.name = 'UAT'
        //             remote.host = 'lkqvap1007.1dc.com'
        //             remote.allowAnyHosts = true
					
		// 			//TODO: Cambiar la version de credencial
		// 			withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sshUser', usernameVariable: 'userName', passwordVariable: 'password']]) {
		// 				remote.user = userName
		// 				remote.password = password

		// 			}

        //             //ETAPA DE MANTENIMIENTO BORRAR  
        //             writeFile file: 'borrarTmp.bash', text: "rm -rf /appserver/wildfly/domain/servers/lkqvap1007/tmp/* \n sudo /etc/init.d/wildfly restart  \n sleep 2m"
        //             sshScript remote: remote, script: "borrarTmp.bash"

        //         }
        //     }

        // }

        // stage('Deploy UAT') {        

        //     steps {
        //         script {
        //             def remote = [:]
        //             remote.name = 'UAT'
        //             remote.host = 'lkqvap1007.1dc.com'
        //             remote.allowAnyHosts = true
					
		// 			//TODO: Cambiar la version de credencial
		// 			withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sshUser', usernameVariable: 'userName', passwordVariable: 'password']]) {
		// 				remote.user = userName
		// 				remote.password = password

		// 			}

                    //version sshuserprivatekey
                    withcredentials([sshuserprivatekey(credentialsid: 'sshuserkey', keyfilevariable: 'identity', passphrasevariable: 'passphrase', usernamevariable: 'username')]) {
                        remote.user = username
                        remote.passphrase = passphrase
						   remote.identityfile = identity
                    }

                    
					
        //             //ETAPA DE DEPLOPY
					
        //             //prueba sin efecto
        //             //writeFile file: 'deploy.cli', text: "connect \n deployment-info --server-group=grupo-ha"
                                    
        //             writeFile file: 'deploy.cli', text: "connect \n deploy -f /tmp/to_implement/posplatform-frontend.war"
        //             sshPut remote: remote, from: 'deploy.cli', into: '/tmp/to_implement'
        //             writeFile file: 'ejecusionDeploy.sh', text:"/appserver/wildfly/bin/jboss-cli.sh  --file=/tmp/to_implement/deploy.cli"
        //             sshScript remote: remote, script: "ejecusionDeploy.sh"

        //         }
        //     }
        // }
            
            
            stage('Deploy UAT') {        

            steps {
                script {
                    // ETAPA DE CONEXION
                    def remote = [:]
                    remote.name = 'UAT'
                    remote.host = 'lkqvap1007.1dc.com'
                    remote.allowAnyHosts = true
					
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sshUser', usernameVariable: 'userName', passwordVariable: 'password']]) {
						remote.user = userName
						remote.password = password

					}
					
                    //ETAPA DE UNDEPLOY  
                
                    writeFile file: 'undeploy.cli', text: "connect \n undeploy posplatform-frontend.war --server-groups=grupo-ha"
                    sshPut remote: remote, from: 'undeploy.cli', into: '/tmp/to_implement'
                    writeFile file: 'ejecusionUndeploy.sh', text:"/appserver/wildfly/bin/jboss-cli.sh  --file=/tmp/to_implement/undeploy.cli"
                    sshScript remote: remote, script: "ejecusionUndeploy.sh"

                    
                    //ETAPA  DE BORRADO DE tmp
                    writeFile file: 'borrarTmp.bash', text: "rm -rf /appserver/wildfly/domain/servers/lkqvap1007/tmp/* \n sudo /etc/init.d/wildfly stop \n sudo /etc/init.d/wildfly start  \n sleep 2m "
                    sshScript remote: remote, script: "borrarTmp.bash"
                    
                    //ETAPA DE DEPLOY  
                    writeFile file: 'deploy.cli', text: "connect \n deploy /tmp/to_implement/posplatform-frontend.war --server-groups=grupo-ha"
                    sshPut remote: remote, from: 'deploy.cli', into: '/tmp/to_implement'
                    writeFile file: 'ejecusionDeploy.sh', text:"/appserver/wildfly/bin/jboss-cli.sh  --file=/tmp/to_implement/deploy.cli"
                    sshScript remote: remote, script: "ejecusionDeploy.sh"
                    
                }
            }
        }
            

    }
}
